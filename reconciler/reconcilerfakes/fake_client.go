// Code generated by counterfeiter. DO NOT EDIT.
package reconcilerfakes

import (
	"context"
	"sync"

	v1 "github.com/cirocosta/scm-controller/api/v1"
	"github.com/cirocosta/scm-controller/reconciler"
	v1a "k8s.io/api/core/v1"
)

type FakeClient struct {
	CommitStatusStub        func(context.Context, string, string) (*v1.CommitStatus, bool, error)
	commitStatusMutex       sync.RWMutex
	commitStatusArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	commitStatusReturns struct {
		result1 *v1.CommitStatus
		result2 bool
		result3 error
	}
	commitStatusReturnsOnCall map[int]struct {
		result1 *v1.CommitStatus
		result2 bool
		result3 error
	}
	SecretStub        func(context.Context, string, string) (*v1a.Secret, bool, error)
	secretMutex       sync.RWMutex
	secretArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	secretReturns struct {
		result1 *v1a.Secret
		result2 bool
		result3 error
	}
	secretReturnsOnCall map[int]struct {
		result1 *v1a.Secret
		result2 bool
		result3 error
	}
	ServiceAccountStub        func(context.Context, string, string) (*v1a.ServiceAccount, bool, error)
	serviceAccountMutex       sync.RWMutex
	serviceAccountArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	serviceAccountReturns struct {
		result1 *v1a.ServiceAccount
		result2 bool
		result3 error
	}
	serviceAccountReturnsOnCall map[int]struct {
		result1 *v1a.ServiceAccount
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) CommitStatus(arg1 context.Context, arg2 string, arg3 string) (*v1.CommitStatus, bool, error) {
	fake.commitStatusMutex.Lock()
	ret, specificReturn := fake.commitStatusReturnsOnCall[len(fake.commitStatusArgsForCall)]
	fake.commitStatusArgsForCall = append(fake.commitStatusArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("CommitStatus", []interface{}{arg1, arg2, arg3})
	fake.commitStatusMutex.Unlock()
	if fake.CommitStatusStub != nil {
		return fake.CommitStatusStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.commitStatusReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeClient) CommitStatusCallCount() int {
	fake.commitStatusMutex.RLock()
	defer fake.commitStatusMutex.RUnlock()
	return len(fake.commitStatusArgsForCall)
}

func (fake *FakeClient) CommitStatusCalls(stub func(context.Context, string, string) (*v1.CommitStatus, bool, error)) {
	fake.commitStatusMutex.Lock()
	defer fake.commitStatusMutex.Unlock()
	fake.CommitStatusStub = stub
}

func (fake *FakeClient) CommitStatusArgsForCall(i int) (context.Context, string, string) {
	fake.commitStatusMutex.RLock()
	defer fake.commitStatusMutex.RUnlock()
	argsForCall := fake.commitStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) CommitStatusReturns(result1 *v1.CommitStatus, result2 bool, result3 error) {
	fake.commitStatusMutex.Lock()
	defer fake.commitStatusMutex.Unlock()
	fake.CommitStatusStub = nil
	fake.commitStatusReturns = struct {
		result1 *v1.CommitStatus
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClient) CommitStatusReturnsOnCall(i int, result1 *v1.CommitStatus, result2 bool, result3 error) {
	fake.commitStatusMutex.Lock()
	defer fake.commitStatusMutex.Unlock()
	fake.CommitStatusStub = nil
	if fake.commitStatusReturnsOnCall == nil {
		fake.commitStatusReturnsOnCall = make(map[int]struct {
			result1 *v1.CommitStatus
			result2 bool
			result3 error
		})
	}
	fake.commitStatusReturnsOnCall[i] = struct {
		result1 *v1.CommitStatus
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClient) Secret(arg1 context.Context, arg2 string, arg3 string) (*v1a.Secret, bool, error) {
	fake.secretMutex.Lock()
	ret, specificReturn := fake.secretReturnsOnCall[len(fake.secretArgsForCall)]
	fake.secretArgsForCall = append(fake.secretArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("Secret", []interface{}{arg1, arg2, arg3})
	fake.secretMutex.Unlock()
	if fake.SecretStub != nil {
		return fake.SecretStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.secretReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeClient) SecretCallCount() int {
	fake.secretMutex.RLock()
	defer fake.secretMutex.RUnlock()
	return len(fake.secretArgsForCall)
}

func (fake *FakeClient) SecretCalls(stub func(context.Context, string, string) (*v1a.Secret, bool, error)) {
	fake.secretMutex.Lock()
	defer fake.secretMutex.Unlock()
	fake.SecretStub = stub
}

func (fake *FakeClient) SecretArgsForCall(i int) (context.Context, string, string) {
	fake.secretMutex.RLock()
	defer fake.secretMutex.RUnlock()
	argsForCall := fake.secretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) SecretReturns(result1 *v1a.Secret, result2 bool, result3 error) {
	fake.secretMutex.Lock()
	defer fake.secretMutex.Unlock()
	fake.SecretStub = nil
	fake.secretReturns = struct {
		result1 *v1a.Secret
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClient) SecretReturnsOnCall(i int, result1 *v1a.Secret, result2 bool, result3 error) {
	fake.secretMutex.Lock()
	defer fake.secretMutex.Unlock()
	fake.SecretStub = nil
	if fake.secretReturnsOnCall == nil {
		fake.secretReturnsOnCall = make(map[int]struct {
			result1 *v1a.Secret
			result2 bool
			result3 error
		})
	}
	fake.secretReturnsOnCall[i] = struct {
		result1 *v1a.Secret
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClient) ServiceAccount(arg1 context.Context, arg2 string, arg3 string) (*v1a.ServiceAccount, bool, error) {
	fake.serviceAccountMutex.Lock()
	ret, specificReturn := fake.serviceAccountReturnsOnCall[len(fake.serviceAccountArgsForCall)]
	fake.serviceAccountArgsForCall = append(fake.serviceAccountArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("ServiceAccount", []interface{}{arg1, arg2, arg3})
	fake.serviceAccountMutex.Unlock()
	if fake.ServiceAccountStub != nil {
		return fake.ServiceAccountStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.serviceAccountReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeClient) ServiceAccountCallCount() int {
	fake.serviceAccountMutex.RLock()
	defer fake.serviceAccountMutex.RUnlock()
	return len(fake.serviceAccountArgsForCall)
}

func (fake *FakeClient) ServiceAccountCalls(stub func(context.Context, string, string) (*v1a.ServiceAccount, bool, error)) {
	fake.serviceAccountMutex.Lock()
	defer fake.serviceAccountMutex.Unlock()
	fake.ServiceAccountStub = stub
}

func (fake *FakeClient) ServiceAccountArgsForCall(i int) (context.Context, string, string) {
	fake.serviceAccountMutex.RLock()
	defer fake.serviceAccountMutex.RUnlock()
	argsForCall := fake.serviceAccountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) ServiceAccountReturns(result1 *v1a.ServiceAccount, result2 bool, result3 error) {
	fake.serviceAccountMutex.Lock()
	defer fake.serviceAccountMutex.Unlock()
	fake.ServiceAccountStub = nil
	fake.serviceAccountReturns = struct {
		result1 *v1a.ServiceAccount
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClient) ServiceAccountReturnsOnCall(i int, result1 *v1a.ServiceAccount, result2 bool, result3 error) {
	fake.serviceAccountMutex.Lock()
	defer fake.serviceAccountMutex.Unlock()
	fake.ServiceAccountStub = nil
	if fake.serviceAccountReturnsOnCall == nil {
		fake.serviceAccountReturnsOnCall = make(map[int]struct {
			result1 *v1a.ServiceAccount
			result2 bool
			result3 error
		})
	}
	fake.serviceAccountReturnsOnCall[i] = struct {
		result1 *v1a.ServiceAccount
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.commitStatusMutex.RLock()
	defer fake.commitStatusMutex.RUnlock()
	fake.secretMutex.RLock()
	defer fake.secretMutex.RUnlock()
	fake.serviceAccountMutex.RLock()
	defer fake.serviceAccountMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reconciler.Client = new(FakeClient)
