// Code generated by counterfeiter. DO NOT EDIT.
package statusfakes

import (
	"context"
	"sync"

	"github.com/cirocosta/scm-controller/reconciler/status"
	v1 "k8s.io/api/core/v1"
)

type FakeSecretFetcher struct {
	SecretFromServiceAccountStub        func(context.Context, string, string, string) (*v1.Secret, error)
	secretFromServiceAccountMutex       sync.RWMutex
	secretFromServiceAccountArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	secretFromServiceAccountReturns struct {
		result1 *v1.Secret
		result2 error
	}
	secretFromServiceAccountReturnsOnCall map[int]struct {
		result1 *v1.Secret
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecretFetcher) SecretFromServiceAccount(arg1 context.Context, arg2 string, arg3 string, arg4 string) (*v1.Secret, error) {
	fake.secretFromServiceAccountMutex.Lock()
	ret, specificReturn := fake.secretFromServiceAccountReturnsOnCall[len(fake.secretFromServiceAccountArgsForCall)]
	fake.secretFromServiceAccountArgsForCall = append(fake.secretFromServiceAccountArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("SecretFromServiceAccount", []interface{}{arg1, arg2, arg3, arg4})
	fake.secretFromServiceAccountMutex.Unlock()
	if fake.SecretFromServiceAccountStub != nil {
		return fake.SecretFromServiceAccountStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.secretFromServiceAccountReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecretFetcher) SecretFromServiceAccountCallCount() int {
	fake.secretFromServiceAccountMutex.RLock()
	defer fake.secretFromServiceAccountMutex.RUnlock()
	return len(fake.secretFromServiceAccountArgsForCall)
}

func (fake *FakeSecretFetcher) SecretFromServiceAccountCalls(stub func(context.Context, string, string, string) (*v1.Secret, error)) {
	fake.secretFromServiceAccountMutex.Lock()
	defer fake.secretFromServiceAccountMutex.Unlock()
	fake.SecretFromServiceAccountStub = stub
}

func (fake *FakeSecretFetcher) SecretFromServiceAccountArgsForCall(i int) (context.Context, string, string, string) {
	fake.secretFromServiceAccountMutex.RLock()
	defer fake.secretFromServiceAccountMutex.RUnlock()
	argsForCall := fake.secretFromServiceAccountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSecretFetcher) SecretFromServiceAccountReturns(result1 *v1.Secret, result2 error) {
	fake.secretFromServiceAccountMutex.Lock()
	defer fake.secretFromServiceAccountMutex.Unlock()
	fake.SecretFromServiceAccountStub = nil
	fake.secretFromServiceAccountReturns = struct {
		result1 *v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretFetcher) SecretFromServiceAccountReturnsOnCall(i int, result1 *v1.Secret, result2 error) {
	fake.secretFromServiceAccountMutex.Lock()
	defer fake.secretFromServiceAccountMutex.Unlock()
	fake.SecretFromServiceAccountStub = nil
	if fake.secretFromServiceAccountReturnsOnCall == nil {
		fake.secretFromServiceAccountReturnsOnCall = make(map[int]struct {
			result1 *v1.Secret
			result2 error
		})
	}
	fake.secretFromServiceAccountReturnsOnCall[i] = struct {
		result1 *v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.secretFromServiceAccountMutex.RLock()
	defer fake.secretFromServiceAccountMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecretFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ status.SecretFetcher = new(FakeSecretFetcher)
